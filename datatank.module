<?php

/**
 * @file
 * Contains datatank.module
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Field;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\flexmail\FlexmailHelper\FlexmailHelper;
use Drupal\tdt_client\Client;
use Drupal\tdt_client\Config\DrupalConfig;

/**
 * Helper function to create textfield
 */
function datatank_helper_create_textfield($entityManager, $field_name) {
  $field_storage_values = [
    'field_name' => $field_name,
    'entity_type' => 'datatank_dataset',
    'type' => 'string',
    'translatable' => TRUE,
  ];

  $field_values = [
    'field_name' => $field_name,
    'entity_type' => 'datatank_dataset',
    'bundle' => 'datatank_dataset',
    'label' => $field_name,
    'translatable' => TRUE,
  ];

  $entityManager->getStorage('field_storage_config')
    ->create($field_storage_values)
    ->save();

  $field = $entityManager->getStorage('field_config')
    ->create($field_values);
  $field->save();

  entity_get_form_display('datatank_dataset', 'datatank_dataset', 'default')
    ->setComponent($field_name, [])
    ->save();
}

/**
 * Helper function to create taxonomy field
 */
function datatank_helper_create_taxonomyfield($entity_type, $bundle, $field_name, $field_label, $target_entity_type, $selection_handler = 'default', $cardinality = 1) {
  $vocabulary = Vocabulary::load($field_name);

  if (!$vocabulary) {
    // Create a vocabulary
    $vocabulary = Vocabulary::create(array(
      'name' => 'DataTank Taxonomy terms for' . $field_name,
      'vid' => strtolower($field_name),
      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
    ));
    $vocabulary->save();
  }

  $handler_settings = array(
    'target_bundles' => array(
      $vocabulary->id() => $vocabulary->id(),
    ),
  );

  // Create field
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    FieldStorageConfig::create(array(
      'field_name' => $field_name,
      'type' => 'entity_reference',
      'entity_type' => $entity_type,
      'cardinality' => $cardinality,
      'settings' => array(
        'target_type' => $target_entity_type,
      ),
    ))->save();
  }
  if (!FieldConfig::loadByName($entity_type, $bundle, $field_name)) {
    FieldConfig::create(array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $field_label,
      'settings' => array(
        'handler' => $selection_handler,
        'handler_settings' => $handler_settings,
      ),
    ))->save();
  }

  entity_get_form_display($entity_type, $entity_type, 'default')
    ->setComponent($field_name, [])
    ->save();

}

/**
 * Helper function to get availible entries of this field for entity datatank_datataset
 */
function datatank_helper_get_entries_of_field($field_name) {
  $query = \Drupal::entityQuery('datatank_dataset');

  $nids = $query->execute();
  if (!empty($nids)) {
    return array_values($nids)[0];;
  }

}

/**
 * Helper function to get all the availible taxonomy fields (@deprecated, should be variable)
 */
function datatank_helper_get_tax_fields() {
  return [
    'field_dataset_category' => 'category',
    'field_dataset_type' => 'type',
    'field_dataset_dataset_type' => 'dataset_type',
    'field_dataset_keyword' => 'keyword',
    'field_dataset_license' => 'license',
    'field_dataset_target_group' => 'target_group',
    'field_dataset_publisher_name' => 'publisher_name',
    'field_dataset_language' => 'language',
  ];
}

/**
 * Implements hook_block_build_alter().
 * @param array $build
 * @param \Drupal\Core\Block\BlockPluginInterface $block
 */
function datatank_block_build_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  if ($block->getMachineNameSuggestion() == 'exposedformsearchpage_1') {
    $build['#cache'] = array(
      'max-age' => 0,
    );
  }
}

/**
 * Implements hook_theme().
 */
function datatank_theme() {
  return [
    'datatank_dataset' => [
      'render element' => 'elements',
    ],
    'datatank_info_filters' => [
      'variables' => [
        'title' => '',
        'link' => '',
      ]
    ]
  ];
}

/**
 * Hook_preprocess_template().
 * @param $variables
 */
function datatank_preprocess_datatank_dataset(&$variables) {
  // INFO
  $variables['content'] = $variables['elements'];
  $variables['date'] = drupal_render($variables['elements']['created']);
  $dataset = $variables['elements']['#datatank_dataset'];
  $variables['is_download_page'] = $dataset->__get('download') ? TRUE : FALSE;

  // WFS has less features on detail page
  $type = taxonomy_term_load($dataset->field_dataset_type->get(0)->getValue()['target_id']);
  if ($type && $type->getName() == 'wfs') {
    $variables['wfs'] = TRUE;
  }
  else {
    $variables['wfs'] = FALSE;
  }

  // Url download tab
  $url = Url::fromRoute('entity.datatank_dataset.download', ['datatank_dataset' => $dataset->id()]);
  $variables['downloadtab'] = $url;

    // Classes
  $dataset_type = taxonomy_term_load($dataset->field_dataset_dataset_type->get(0)->getValue('target_id')['target_id']);
  $classes = [];
  if($dataset_type) {
    $classes[] = Html::cleanCssIdentifier(strtolower($dataset_type->getName()));
  }

  $variables['classes'] = implode(' ', $classes);

  // Webforms
  $url = Url::fromUserInput('/contact/contact?dataset=' . $dataset->getName());
  $external_link = \Drupal::l(t('Report a problem with this dataset'), $url);
  $variables['problem_webform'] = $external_link;

  $url = Url::fromUserInput('/contact/feedback');
  $external_link = \Drupal::l(t('Help improve our dataset.'), $url);
  $variables['help_dataset'] = $external_link;


  if (!$variables['wfs']) {
    $formats = datatank_available_formats($dataset);
    $format_labels = [];
    foreach ($formats as $format) {
      $format_labels[] = $format['label'];
    }
    $variables['formats'] = implode(' | ', $format_labels);

    // For the demo url let's use the first 2 parameters
    $query = [];
    for ($i = 0; $i < 2; $i++) {
      if ($pid = $dataset->get('parameter_pid')[$i]->target_id) {
        $parameter = entity_load('datatank_parameter', $pid);
        if ($parameter) {
          $query[$parameter->get('name')->value] = isset($parameter->get('default_value')->value) ? $parameter->get('default_value')->value : 0;
        }
      }
    }

    /// ENKEL FULL MODE
    if ($variables['elements']['#view_mode'] == 'full' && !$variables['is_download_page']) {
      $config = new DrupalConfig();
      $client = new Client($config);

      // URL
      $url = Url::fromUri($config->getEndpoint() . $dataset->getName());
      /*$external_link = \Drupal::l($config->getEndpoint() . $dataset->getName(), $url);
      $variables['url'] = $external_link;*/

      $variables['url'] = $url;

      // Parameter url
      $query['limit'] = 1;
      $parameter_url = Url::fromUri($config->getEndpoint() . $dataset->getName() . '.json', ['query' => $query]);
      $variables['parameter_url'] = $parameter_url->toString();

      // Example result
      $result = $client->get($variables['parameter_url']);
      $variables['parameter_example'] = $result;
    }
  }

  $variables['prefix_tabs_url'] = '';
  if ($variables['is_download_page']) {
    $url = Url::fromRoute('entity.datatank_dataset.canonical', ['datatank_dataset' => $dataset->id()]);
    $variables['prefix_tabs_url'] = $url->toString();
  }

}

/**
 * Implements hook_theme_suggestions_datatank_dataset().
 */
function datatank_theme_suggestions_datatank_dataset($variables) {
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  return 'datatank_dataset__' . $sanitized_view_mode;
}

/**
 * Returns the availible formats in datatank api.
 */
function datatank_available_formats($dataset) {
  $type = taxonomy_term_load($dataset->field_dataset_type->get(0)->getValue()['target_id']);

  $formats = [];
  foreach($type->field_distribution_format->getValue() as $value) {
    $format = taxonomy_term_load($value['target_id']);
    $formats[strtolower($format->getName())] = [
      'label' => $format->getName(),
      'extensie' => '.' . strtolower($format->getName()),
    ];
  }

  return $formats;
}

/**
 * Get available languages from api
 */
function datatank_available_languages() {
  return [
    'de' => t('DE'),
    'da' => t('DA'),
    'it' => t('IT'),
    'nl' => t('NL'),
    'zh' => t('ZH'),
    'en' => t('EN'),
    'fr' => t('FR'),
    'pt' => t('PT'),
    'rv' => t('RV'),
    'ja' => t('JA'),
    'es' => t('ES'),
    'sv' => t('SV')
  ];
}

/**
 * Implements hook_node_insert.
 * @param $node
 */
function datatank_node_insert($node) {
  if ($node->bundle() == 'app') {
    drupal_set_message(t('Thanks for submitting your app, this will go in review.'));
  }
}

/**
 * Implements hook_form_alter().
 */
function datatank_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('datatank.settings');

  if (in_array($form_id, [])) {
    // Add a subscribe to newsletter checkbox to some forms.
    $form['subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => t('I would like to subscribe to the newsletter too'),
      '#default_value' => FALSE,
      '#weight' => 998,
    );
    $form['actions']['#weight'] = 999;

    $form['#submit'][] = 'datatank_subscribe_form_submit';

    // Hide preview button.
    $form['actions']['preview']['#access'] = FALSE;

    // Form specific texts and labels.
    switch ($form_id) {
      case 'contact_message_feedback_form':
        $feedback_intro = $config->get('feedback_intro');
        $form['#prefix'] = check_markup($feedback_intro['value'], $feedback_intro['format']);

        $form['actions']['submit']['#value'] = t('Submit');

        $form['field_feedback_dataset']['widget']['add_more']['#value'] = t('Add another dataset');
        break;
      case 'contact_message_feedback_short_form':
        $feedback_block_intro = $config->get('feedback_block_intro');
        $form['#prefix'] = check_markup($feedback_block_intro['value'], $feedback_block_intro['format']);

        $form['actions']['submit']['#value'] = t('Subscribe');
        break;
      default:
        break;
    }
  }

  // Add a placeholder to views exposed filter and change submit button text.
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-page-1') {
    $form['search_api_fulltext']['#placeholder'] = t('Type one or more keywords');
    $form['actions']['submit']['#value'] = t('Search');
  }

  if(isset($_GET['dataset']) && $_GET['dataset'] != '' && $form_id == 'contact_message_contact_form') {
    $form['message']['widget'][0]['value']['#default_value'] = t('I have problems with dataset: @dataset', array('@dataset' => $_GET['dataset']));
    $form['field_contact_subject']['widget']['#default_value'] =  2;
  }

  // Add some extra space below field_feedback_goal.
  if (in_array($form_id, ['contact_message_feedback_form'])) {
    $form['field_feedback_goal']['#suffix'] = '<div class="form-element-spacer">&nbsp;</div>';
  }
}

/**
 * @todo Write function documentation.
 */
function datatank_subscribe_form_submit(array &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('subscribe')) {
    $flexmail_config = \Drupal::config('flexmail.settings');
    $config = \Drupal::config('datatank.settings');

    $newsletter_success = $config->get('newsletter_success');
    $success_message = (string) check_markup($newsletter_success['value'], $newsletter_success['format']);
    $newsletter_error = $config->get('newsletter_error');
    $error_message = (string) check_markup($newsletter_error['value'], $newsletter_error['format']);
    $response = FlexmailHelper::subscribe(
      $form_state->getValue('email'),
      $flexmail_config->get('default_list_id'),
      $success_message
    );

    if ($response instanceof \Exception) {
      if ($response->getCode() == 225) {
        drupal_set_message(t($success_message));
      }
      else {
        drupal_set_message(t($error_message, array('@message' => $response->getMessage())), 'error');
      }
    }
  }
}
